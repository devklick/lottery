// <auto-generated />
using System;
using Lottery.DB.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Lottery.DB.Migrations
{
    [DbContext(typeof(MaintenanceDBContext))]
    [Migration("20240325173217_AddColumn_Game_CloseTime")]
    partial class AddColumn_Game_CloseTime
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "account_type", new[] { "user", "service" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "item_state", new[] { "enabled", "disabled" });
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Lottery.DB.Entities.Dbo.Entry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime>("CreatedOnUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on_utc")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uuid")
                        .HasColumnName("game_id");

                    b.Property<int>("State")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1)
                        .HasColumnName("state");

                    b.Property<DateTime>("StateLastUpdatedUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("state_last_updated_utc")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("UpdatedOnUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_on_utc")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("GameId");

                    b.ToTable("entry", "dbo");
                });

            modelBuilder.Entity("Lottery.DB.Entities.Dbo.EntryPrize", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime>("CreatedOnUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on_utc")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("EntryId")
                        .HasColumnType("uuid")
                        .HasColumnName("entry_id");

                    b.Property<Guid>("GamePrizeId")
                        .HasColumnType("uuid")
                        .HasColumnName("game_prize_id");

                    b.Property<int>("State")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1)
                        .HasColumnName("state");

                    b.Property<DateTime>("StateLastUpdatedUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("state_last_updated_utc")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("UpdatedOnUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_on_utc")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EntryId")
                        .IsUnique();

                    b.HasIndex("GamePrizeId", "EntryId")
                        .IsUnique();

                    b.ToTable("entry_prize", "dbo");
                });

            modelBuilder.Entity("Lottery.DB.Entities.Dbo.EntrySelection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime>("CreatedOnUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on_utc")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("EntryId")
                        .HasColumnType("uuid")
                        .HasColumnName("entry_id");

                    b.Property<Guid>("GameSelectionId")
                        .HasColumnType("uuid")
                        .HasColumnName("game_selection_id");

                    b.Property<int>("State")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1)
                        .HasColumnName("state");

                    b.Property<DateTime>("StateLastUpdatedUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("state_last_updated_utc")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("UpdatedOnUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_on_utc")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("GameSelectionId");

                    b.HasIndex("EntryId", "GameSelectionId")
                        .IsUnique();

                    b.ToTable("entry_selection", "dbo");
                });

            modelBuilder.Entity("Lottery.DB.Entities.Dbo.Game", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CloseTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("close_time");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime>("CreatedOnUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on_utc")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("DrawTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("draw_time");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("ResultedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("resulted_at");

                    b.Property<int>("SelectionsRequiredForEntry")
                        .HasColumnType("integer")
                        .HasColumnName("selections_required_for_entry");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_time");

                    b.Property<int>("State")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1)
                        .HasColumnName("state");

                    b.Property<DateTime>("StateLastUpdatedUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("state_last_updated_utc")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("UpdatedOnUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_on_utc")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.ToTable("game", "dbo");
                });

            modelBuilder.Entity("Lottery.DB.Entities.Dbo.GamePrize", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime>("CreatedOnUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on_utc")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uuid")
                        .HasColumnName("game_id");

                    b.Property<int>("NumberMatchCount")
                        .HasColumnType("integer")
                        .HasColumnName("number_match_count");

                    b.Property<int>("Position")
                        .HasColumnType("integer")
                        .HasColumnName("position");

                    b.Property<int>("State")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1)
                        .HasColumnName("state");

                    b.Property<DateTime>("StateLastUpdatedUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("state_last_updated_utc")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("UpdatedOnUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_on_utc")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("GameId", "NumberMatchCount")
                        .IsUnique();

                    b.HasIndex("GameId", "Position")
                        .IsUnique();

                    b.ToTable("game_prize", "dbo");
                });

            modelBuilder.Entity("Lottery.DB.Entities.Dbo.GameResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime>("CreatedOnUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on_utc")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uuid")
                        .HasColumnName("game_id");

                    b.Property<Guid>("SelectionId")
                        .HasColumnType("uuid")
                        .HasColumnName("selection_id");

                    b.Property<int>("State")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1)
                        .HasColumnName("state");

                    b.Property<DateTime>("StateLastUpdatedUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("state_last_updated_utc")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("UpdatedOnUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_on_utc")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("SelectionId");

                    b.HasIndex("GameId", "SelectionId")
                        .IsUnique();

                    b.ToTable("game_result", "dbo");
                });

            modelBuilder.Entity("Lottery.DB.Entities.Dbo.GameSelection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime>("CreatedOnUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on_utc")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uuid")
                        .HasColumnName("game_id");

                    b.Property<int>("SelectionNumber")
                        .HasColumnType("integer")
                        .HasColumnName("selection_number");

                    b.Property<int>("State")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1)
                        .HasColumnName("state");

                    b.Property<DateTime>("StateLastUpdatedUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("state_last_updated_utc")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("UpdatedOnUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_on_utc")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("GameId", "SelectionNumber")
                        .IsUnique();

                    b.ToTable("game_selection", "dbo");
                });

            modelBuilder.Entity("Lottery.DB.Entities.Idt.AppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("description");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("display_name");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_name");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("app_role", "idt");

                    b.HasData(
                        new
                        {
                            Id = new Guid("19b7d67e-1ad8-4407-b627-d5f56534952f"),
                            ConcurrencyStamp = "52280e41296c4a5e8174f8784248bc42",
                            Description = "Elevated permissions across the entire system.",
                            DisplayName = "System Administrator",
                            Name = "SystemAdministrator",
                            NormalizedName = "SYSTEMADMINISTRATOR"
                        },
                        new
                        {
                            Id = new Guid("226919e5-1ad7-41d2-b04f-4aaa1a1bb2ea"),
                            ConcurrencyStamp = "36cac6ed3d014fdbbc81d05d31271c57",
                            Description = "Permission to create and edit any games",
                            DisplayName = "Game Admin",
                            Name = "GameAdmin",
                            NormalizedName = "GAMEADMIN"
                        },
                        new
                        {
                            Id = new Guid("5ca47808-83c0-4eab-a034-1a48cefa3c4a"),
                            ConcurrencyStamp = "8d5defcfbc2b41f4a0b6b688d6b2b3cc",
                            Description = "Permission to access the site and play games.",
                            DisplayName = "Basic User",
                            Name = "BasicUser",
                            NormalizedName = "BASICUSER"
                        },
                        new
                        {
                            Id = new Guid("db16d273-ae17-4822-bbf8-120cec7e3a58"),
                            ConcurrencyStamp = "2b024b8b4ea8482f9a52b178f8db4f5f",
                            Description = "Role to be assumed by user accounts used by backend services.",
                            DisplayName = "Service Account",
                            Name = "ServiceAccount",
                            NormalizedName = "SERVICEACCOUNT"
                        });
                });

            modelBuilder.Entity("Lottery.DB.Entities.Idt.AppRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("role_id");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("app_role_claim", "idt");
                });

            modelBuilder.Entity("Lottery.DB.Entities.Idt.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer")
                        .HasColumnName("access_failed_count");

                    b.Property<int>("AccountType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("account_type");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("email_confirmed");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("lockout_enabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lockout_end");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_email");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_user_name");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("phone_number_confirmed");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text")
                        .HasColumnName("security_stamp");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("two_factor_enabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("user_name");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("app_user", "idt");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5621cc59-6211-42d2-a4e3-e9584c248adb"),
                            AccessFailedCount = 0,
                            AccountType = 0,
                            ConcurrencyStamp = "14d6d9e59ee8404b9ae5eeb6e4e93649",
                            Email = "SystemAdministrator@Lottery.Game",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "SYSTEMADMINISTRATOR@LOTTERY.GAME",
                            NormalizedUserName = "SYSTEMADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEP10n4hvnAc3t7C37OKXmewiCwNxeplBD4bT0rfi3aROpPl3qQahy73GQSsj4S19zA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9f55cc840dd248c99227ae8481687016",
                            TwoFactorEnabled = false,
                            UserName = "SystemAdmin"
                        },
                        new
                        {
                            Id = new Guid("295c6034-e0ff-4c22-a94a-14fb4b6659a8"),
                            AccessFailedCount = 0,
                            AccountType = 0,
                            ConcurrencyStamp = "2322bfebfc0c431888d562f9ddab64b2",
                            Email = "GameAdmin@Lottery.Game",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "GAMEADMIN@LOTTERY.GAME",
                            NormalizedUserName = "GAMEADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEELd8ryhW0K/RNt+OWkZMthNnRzoHhZt9UZsmjQw+zsRalRmUnocjXSDo+zS3AFE3Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d6ce8ca4a5aa40e990739387adbf276c",
                            TwoFactorEnabled = false,
                            UserName = "GameAdmin"
                        },
                        new
                        {
                            Id = new Guid("a3564302-1a9e-4917-8a48-1a70f211279e"),
                            AccessFailedCount = 0,
                            AccountType = 1,
                            ConcurrencyStamp = "891374d684394e6384b5afdcf21c365d",
                            Email = "Lottery.Api.User@Lottery.Game",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "LOTTERY.API.USER@LOTTERY.GAME",
                            NormalizedUserName = "LOTTERY.API.USER",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "734382eaf85944b0a5ba7ba9f270b3af",
                            TwoFactorEnabled = false,
                            UserName = "Lottery.Api.User"
                        },
                        new
                        {
                            Id = new Guid("aeb0bc13-14d4-4999-82c3-ec4b95a56818"),
                            AccessFailedCount = 0,
                            AccountType = 1,
                            ConcurrencyStamp = "87d73fa701bf494b9ef9c5f193278a3f",
                            Email = "Lottery.ResultService.User@Lottery.Game",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "LOTTERY.RESULTSERVICE.USER@LOTTERY.GAME",
                            NormalizedUserName = "LOTTERY.RESULTSERVICE.USER",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bdd00b91be02492cb91154dabb5ce5a2",
                            TwoFactorEnabled = false,
                            UserName = "Lottery.ResultService.User"
                        });
                });

            modelBuilder.Entity("Lottery.DB.Entities.Idt.AppUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("app_user_claim", "idt");
                });

            modelBuilder.Entity("Lottery.DB.Entities.Idt.AppUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text")
                        .HasColumnName("provider_key");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text")
                        .HasColumnName("provider_display_name");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("app_user_login", "idt");
                });

            modelBuilder.Entity("Lottery.DB.Entities.Idt.AppUserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("role_id");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("app_user_role", "idt");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("5621cc59-6211-42d2-a4e3-e9584c248adb"),
                            RoleId = new Guid("19b7d67e-1ad8-4407-b627-d5f56534952f")
                        },
                        new
                        {
                            UserId = new Guid("295c6034-e0ff-4c22-a94a-14fb4b6659a8"),
                            RoleId = new Guid("226919e5-1ad7-41d2-b04f-4aaa1a1bb2ea")
                        },
                        new
                        {
                            UserId = new Guid("a3564302-1a9e-4917-8a48-1a70f211279e"),
                            RoleId = new Guid("db16d273-ae17-4822-bbf8-120cec7e3a58")
                        },
                        new
                        {
                            UserId = new Guid("aeb0bc13-14d4-4999-82c3-ec4b95a56818"),
                            RoleId = new Guid("db16d273-ae17-4822-bbf8-120cec7e3a58")
                        });
                });

            modelBuilder.Entity("Lottery.DB.Entities.Idt.AppUserToken", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("app_user_token", "idt");
                });

            modelBuilder.Entity("Lottery.DB.Entities.Dbo.Entry", b =>
                {
                    b.HasOne("Lottery.DB.Entities.Idt.AppUser", "CreatedBy")
                        .WithMany("Entries")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Lottery.DB.Entities.Dbo.Game", "Game")
                        .WithMany("Entries")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("Game");
                });

            modelBuilder.Entity("Lottery.DB.Entities.Dbo.EntryPrize", b =>
                {
                    b.HasOne("Lottery.DB.Entities.Idt.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Lottery.DB.Entities.Dbo.Entry", "Entry")
                        .WithOne("Prize")
                        .HasForeignKey("Lottery.DB.Entities.Dbo.EntryPrize", "EntryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Lottery.DB.Entities.Dbo.GamePrize", "GamePrize")
                        .WithMany("EntryPrizes")
                        .HasForeignKey("GamePrizeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("Entry");

                    b.Navigation("GamePrize");
                });

            modelBuilder.Entity("Lottery.DB.Entities.Dbo.EntrySelection", b =>
                {
                    b.HasOne("Lottery.DB.Entities.Idt.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Lottery.DB.Entities.Dbo.Entry", "Entry")
                        .WithMany("Selections")
                        .HasForeignKey("EntryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Lottery.DB.Entities.Dbo.GameSelection", "GameSelection")
                        .WithMany()
                        .HasForeignKey("GameSelectionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("Entry");

                    b.Navigation("GameSelection");
                });

            modelBuilder.Entity("Lottery.DB.Entities.Dbo.Game", b =>
                {
                    b.HasOne("Lottery.DB.Entities.Idt.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("Lottery.DB.Entities.Dbo.GamePrize", b =>
                {
                    b.HasOne("Lottery.DB.Entities.Idt.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Lottery.DB.Entities.Dbo.Game", "Game")
                        .WithMany("Prizes")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("Game");
                });

            modelBuilder.Entity("Lottery.DB.Entities.Dbo.GameResult", b =>
                {
                    b.HasOne("Lottery.DB.Entities.Idt.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Lottery.DB.Entities.Dbo.Game", "Game")
                        .WithMany("Results")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Lottery.DB.Entities.Dbo.GameSelection", "Selection")
                        .WithMany()
                        .HasForeignKey("SelectionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("Game");

                    b.Navigation("Selection");
                });

            modelBuilder.Entity("Lottery.DB.Entities.Dbo.GameSelection", b =>
                {
                    b.HasOne("Lottery.DB.Entities.Idt.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Lottery.DB.Entities.Dbo.Game", "Game")
                        .WithMany("Selections")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("Game");
                });

            modelBuilder.Entity("Lottery.DB.Entities.Idt.AppRoleClaim", b =>
                {
                    b.HasOne("Lottery.DB.Entities.Idt.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Lottery.DB.Entities.Idt.AppUserClaim", b =>
                {
                    b.HasOne("Lottery.DB.Entities.Idt.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Lottery.DB.Entities.Idt.AppUserLogin", b =>
                {
                    b.HasOne("Lottery.DB.Entities.Idt.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Lottery.DB.Entities.Idt.AppUserRole", b =>
                {
                    b.HasOne("Lottery.DB.Entities.Idt.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Lottery.DB.Entities.Idt.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Lottery.DB.Entities.Idt.AppUserToken", b =>
                {
                    b.HasOne("Lottery.DB.Entities.Idt.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Lottery.DB.Entities.Dbo.Entry", b =>
                {
                    b.Navigation("Prize");

                    b.Navigation("Selections");
                });

            modelBuilder.Entity("Lottery.DB.Entities.Dbo.Game", b =>
                {
                    b.Navigation("Entries");

                    b.Navigation("Prizes");

                    b.Navigation("Results");

                    b.Navigation("Selections");
                });

            modelBuilder.Entity("Lottery.DB.Entities.Dbo.GamePrize", b =>
                {
                    b.Navigation("EntryPrizes");
                });

            modelBuilder.Entity("Lottery.DB.Entities.Idt.AppUser", b =>
                {
                    b.Navigation("Entries");
                });
#pragma warning restore 612, 618
        }
    }
}
